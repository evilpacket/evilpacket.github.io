<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on EvilPacket</title>
    <link>http://evilpacket.net/posts/</link>
    <description>Recent content in Posts on EvilPacket</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Nov 2020 08:04:37 -0800</lastBuildDate><atom:link href="http://evilpacket.net/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Headless Holiday Hack: Flag 1</title>
      <link>http://evilpacket.net/2020/headless-holiday-hack-part-1/</link>
      <pubDate>Fri, 27 Nov 2020 08:04:37 -0800</pubDate>
      
      <guid>http://evilpacket.net/2020/headless-holiday-hack-part-1/</guid>
      <description>Last night I tossed up a quick CTF-esque challenge with a couple of flags defined.
Let&amp;#39;s have some fun with a CTF challenge. I&amp;#39;ll post updates &amp;amp; solves here or something.
IP:PORT 178.128.7.71:9222
flag1: /home/browser/flag.txt
???
flag2: /root/flag.txt
It&amp;#39;s one service on one box, don&amp;#39;t be dicks to the service provider / others or my account or it won&amp;#39;t be fun
&amp;mdash; Adam Baldwin (@adam_baldwin) November 27, 2020  The host and service to attack is located at 178.</description>
    </item>
    
    <item>
      <title>My Favorite Vulnerability: From ERROR to inter-protocol exploitation</title>
      <link>http://evilpacket.net/2020/my-favorite-vuln/</link>
      <pubDate>Sun, 09 Feb 2020 10:00:13 -0800</pubDate>
      
      <guid>http://evilpacket.net/2020/my-favorite-vuln/</guid>
      <description>I&amp;rsquo;m excited to finally write up and share my favorite vulnerability I&amp;rsquo;ve ever found. It&amp;rsquo;s a story where all the right pieces fell into place to make it exploitable. The names, ports, and other details have been changed to protect the vulnerable even though this took place probably 6 years ago and I believe the devices are now sunsetted.
So there I was testing this, ah, device. Let&amp;rsquo;s just go with that for now.</description>
    </item>
    
    <item>
      <title>Identify an O.MG Cable</title>
      <link>http://evilpacket.net/2020/identify-an-omg-cable/</link>
      <pubDate>Mon, 06 Jan 2020 17:34:01 -0800</pubDate>
      
      <guid>http://evilpacket.net/2020/identify-an-omg-cable/</guid>
      <description>Today I got my hands on an O.MG cable. It is extremely well manufactured and to most it will be extremely stealthy.
I thought it would be fun and educational to do a side by side comparison to create a reference for some minor visual differences to be able to detect one in the field. This comparison was done with what I believe to be official Apple cables.
  Apple cables have more of a matte finish on the usb connector than the O.</description>
    </item>
    
    <item>
      <title>Using Chrome Debugger Metasploit Gather Module</title>
      <link>http://evilpacket.net/2019/using-chrome-debugger-msf-gather-module/</link>
      <pubDate>Thu, 19 Dec 2019 09:19:25 -0800</pubDate>
      
      <guid>http://evilpacket.net/2019/using-chrome-debugger-msf-gather-module/</guid>
      <description>This last week Nick Starke got the chrome debugger metasploit module pushed over the line and merged into master. I figured I&amp;rsquo;d write up a quick intro to the module and how it might be used should you happen to stumble across a chrome debugger laying around the network.
Local environment If you want to startup chrome and test this yourself you can run chrome in a similar fashion.
/Applications/Google\ Chrome.</description>
    </item>
    
    <item>
      <title>metasploit-framework Dev Environment setup issues</title>
      <link>http://evilpacket.net/2019/msf-dev-environment/</link>
      <pubDate>Wed, 18 Dec 2019 22:27:58 -0800</pubDate>
      
      <guid>http://evilpacket.net/2019/msf-dev-environment/</guid>
      <description>While following the Setting Up a Metasploit Development Environment I ran into a few hiccups. Hopefully somebody else won&amp;rsquo;t stumble if I write it down and share it.
Error: ruby-build: definition not found: 2.6.2 I think originally I was on an ubuntu system but I also ran into this when developing from Kali Linux.
apt-get remove ruby-build git clone https://github.com/rbenv/ruby-build.git cd ruby-build sudo ./install.sh rbev issues rbev wasn&amp;rsquo;t installed on my system right either.</description>
    </item>
    
    <item>
      <title>Leveraging Javascript Debuggers for compromise</title>
      <link>http://evilpacket.net/2019/leveraging-javascript-debuggers/</link>
      <pubDate>Tue, 10 Sep 2019 16:27:22 -0700</pubDate>
      
      <guid>http://evilpacket.net/2019/leveraging-javascript-debuggers/</guid>
      <description>Summary I discovered that developers do leave remote JavaScript debuggers and headless browsers laying around on the internet leading to sensitive data exposure and an interesting remote position for an attacker.
The rest of the story While learning how to actually use chrome devtools to remotely debug a Node.js application was working on I encountered an error when I tried to visit the debugger service with my web browser.
While the Node.</description>
    </item>
    
    <item>
      <title>Enumerating Files Using Server Side Request Forgery and the request Module</title>
      <link>http://evilpacket.net/2017/enumerating-files-using-server-side-request-forgery-and-the-request-module/</link>
      <pubDate>Fri, 15 Dec 2017 09:02:16 -0800</pubDate>
      
      <guid>http://evilpacket.net/2017/enumerating-files-using-server-side-request-forgery-and-the-request-module/</guid>
      <description>If you ever find Server Side Request Forgery (SSRF) in a node.js based application and the app is using the request module you can use a special url format to detect the existence of files / directories.
While request does not support the file:// scheme it does supports a special url format to communicate with unix domain sockets and the errors returned from a file existing vs not existing are different.</description>
    </item>
    
    <item>
      <title>npm Registry Spelunking: Dependencies Referenced by URL</title>
      <link>http://evilpacket.net/2017/npm-registry-spelunking-dependencies-referenced-by-url/</link>
      <pubDate>Wed, 08 Nov 2017 14:40:22 -0800</pubDate>
      
      <guid>http://evilpacket.net/2017/npm-registry-spelunking-dependencies-referenced-by-url/</guid>
      <description>I’ve learned a long time ago that not all security research pans out with a stack of vulnerabilities but every time I venture down a rabbit hole I learn something along the way. This is one of those times.
During a recent assessment ^Lift team member Jon Lamendola found an access_token on a url for a project dependency and that got us thinking:
 “wonder if any npm dependencies are using urls that contain tokens or passwords.</description>
    </item>
    
    <item>
      <title>Bypassing npm / yarn ignore Scripts with Command Injection</title>
      <link>http://evilpacket.net/2017/bypassing-npm-ignore-scripts-with-command-injection-in-package-json/</link>
      <pubDate>Thu, 10 Aug 2017 17:11:17 -0700</pubDate>
      
      <guid>http://evilpacket.net/2017/bypassing-npm-ignore-scripts-with-command-injection-in-package-json/</guid>
      <description>Before you read this post please run git --version and if it’s not 2.14.1 or greater then please go upgrade it.
In this post we are going to explore abusing the recently published git ssh:// url vulnerability inside of a package.json to execute commands during the npm install process.
How the vulnerability works:
The git vulnerability results from a malformed ssh:// url beginning with a dash (-), confusing the ssh command into thinking the hostname is a command argument rather than a hostname.</description>
    </item>
    
    <item>
      <title>My story about mentorship and my career</title>
      <link>http://evilpacket.net/2017/my-story-about-mentorship/</link>
      <pubDate>Tue, 20 Jun 2017 18:41:00 -0700</pubDate>
      
      <guid>http://evilpacket.net/2017/my-story-about-mentorship/</guid>
      <description>The Practical Developer DevDiscuss one day got me thinking about mentorship and how it’s impacted my life. It doesn’t fit in a tweet or a thread of tweets so you get the story about how a mentorship gave me my entire career in security. This is going to be a bit stream of mind so give me a break on grammar and spelling :)
I was raised in a small farming town in Minnesota.</description>
    </item>
    
    <item>
      <title>In Memory Backdoor for Node.js Express Apps</title>
      <link>http://evilpacket.net/2017/in-memory-backdoor-for-node-js-express-apps/</link>
      <pubDate>Thu, 02 Mar 2017 17:15:51 -0800</pubDate>
      
      <guid>http://evilpacket.net/2017/in-memory-backdoor-for-node-js-express-apps/</guid>
      <description>Earlier this week Zach Grace published an article on one way that you could backdoor a Node.js Express application without touching disk. This jogged my memory of something I posted in our team’s chat this last week but never wrote about; how I would in memory backdoor an express application. It’s a bit different than how Zach approached it so I thought it would be good to expand upon his post sharing the knowledge.</description>
    </item>
    
    <item>
      <title>Compromising Node.js apps using Machine-in-the-Middle</title>
      <link>http://evilpacket.net/2017/compromising-node-js-apps-using-machine-in-the-middle/</link>
      <pubDate>Wed, 11 Jan 2017 16:31:08 -0800</pubDate>
      
      <guid>http://evilpacket.net/2017/compromising-node-js-apps-using-machine-in-the-middle/</guid>
      <description>Just before the New Years I published 140+ advisories on Node.js modules. I’ve been researching ways to compromise developers &amp;amp; node.js applications without compromising the npm registry or their CDN.
To start, I looked for modules with install hooks that downloaded and executed or used resources from the internet over HTTP, an insecure medium that’s susceptible to interception and manipulation, also known as a machine-in-the-middle attack.
What is Machine-In-The-Middle (MITM)?</description>
    </item>
    
    <item>
      <title>Pillaging Distributed Version Control 5 Years Later</title>
      <link>http://evilpacket.net/2016/pillaging-distributed-version-control-5-years-later/</link>
      <pubDate>Sun, 13 Nov 2016 10:38:59 -0700</pubDate>
      
      <guid>http://evilpacket.net/2016/pillaging-distributed-version-control-5-years-later/</guid>
      <description>5 years ago at DEFCON 19 I gave a talked titled “Pillaging DVCS repos for fun and profit.” The technique &amp;amp; tool I outlined in that talk has been very fruitful through out the years and plenty of security consultants have told me that this had helped them have breakthroughs during penetration tests. If it’s useful to us it’s also useful to attackers.
The basics of the vulnerability is that git/mercurial/bazar are all distributed version control systems and because of that if you have access to the .</description>
    </item>
    
    <item>
      <title>What Are the Bots Up to on npm?</title>
      <link>http://evilpacket.net/2016/what-are-the-bots-up-to-on-npm/</link>
      <pubDate>Tue, 08 Nov 2016 15:59:14 -0700</pubDate>
      
      <guid>http://evilpacket.net/2016/what-are-the-bots-up-to-on-npm/</guid>
      <description>Last year (2015) I had a thought, “who else is downloading and running / testing random modules on npm.” Postulating that there might be bots, build systems or other researchers mass downloading and running modules from npm. I figured it might be an interesting vector to attack systems and gain a foothold for some org and I was curious to know what that traffic looked like.
So I set the bait.</description>
    </item>
    
    <item>
      <title>Atom.io Misconfiguration Allowed Code Execution on Untrusted Networks</title>
      <link>http://evilpacket.net/2016/atom-io-misconfiguration-allowed-code-execution-on-untrusted-networks/</link>
      <pubDate>Sun, 30 Oct 2016 09:16:51 -0700</pubDate>
      
      <guid>http://evilpacket.net/2016/atom-io-misconfiguration-allowed-code-execution-on-untrusted-networks/</guid>
      <description>Developers have increasingly become a more valuable target to compromise in recent years. The DevOps movement means they have more access to production, not to mention the plethora of source code and keys that you are likely to find.
This post is going to show you how a production configuration mistake on the atom.io domain that put users of the Atom editor at risk.
Note this issue is now fixed thanks to the GitHub Security team.</description>
    </item>
    
    <item>
      <title>Regular Expression Denial of Service Affecting Express.js</title>
      <link>http://evilpacket.net/2016/regular-expression-denial-of-service-affecting-express-js/</link>
      <pubDate>Fri, 29 Apr 2016 15:59:41 -0700</pubDate>
      
      <guid>http://evilpacket.net/2016/regular-expression-denial-of-service-affecting-express-js/</guid>
      <description>At the end of April I found a flaw in a module that Express and many other frameworks use. This flaw allows a remote attacker to block the event loop of a remote site causing a Denial of Service effectively blocking the site from being accessed. This type of attack is known as a Regular Expression Denial of Service attack and we’ve found it to be quite common in applications and modules we test.</description>
    </item>
    
  </channel>
</rss>
