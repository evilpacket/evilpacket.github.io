<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on EvilPacket</title><link>/categories/security/</link><description>Recent content in Security on EvilPacket</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 28 Jan 2021 17:35:34 -0800</lastBuildDate><atom:link href="/categories/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Attacking OSS Using Abandoned Resources</title><link>/blog/attacking-oss-using-abandoned-resources/</link><pubDate>Thu, 28 Jan 2021 17:35:34 -0800</pubDate><guid>/blog/attacking-oss-using-abandoned-resources/</guid><description>&lt;p>In December I discovered a supply chain vulnerability that impacted 6,530 public npm package versions, at least I thought I did. Turns out that earlier in October of 2020 Security Innovation published similar research dubbing the issue &lt;a href="https://blog.securityinnovation.com/repo-jacking-exploiting-the-dependency-supply-chain"




 target="_blank"
 


>Repo Jacking&lt;/a>. This initially took the wind out of my sails but after I thought about it rediscovery is pretty cool and I was able to expand upon it a bit by focusing on abandoned S3 buckets, Google Cloud Storage bucket, expired domain names, and finding and reporting a vulnerability in GitHub to make exploitation possible in some conditions.&lt;/p></description></item><item><title>Enumerating Files Using Server Side Request Forgery and the request Module</title><link>/blog/enumerating-files-using-server-side-request-forgery-and-the-request-module/</link><pubDate>Fri, 15 Dec 2017 09:02:16 -0800</pubDate><guid>/blog/enumerating-files-using-server-side-request-forgery-and-the-request-module/</guid><description>&lt;p>If you ever find Server Side Request Forgery (SSRF) in a node.js based application and the app is using the request module you can use a special url format to detect the existence of files / directories.&lt;/p></description></item><item><title>Bypassing npm / yarn ignore Scripts with Command Injection</title><link>/blog/bypassing-npm-ignore-scripts-with-command-injection-in-package-json/</link><pubDate>Thu, 10 Aug 2017 17:11:17 -0700</pubDate><guid>/blog/bypassing-npm-ignore-scripts-with-command-injection-in-package-json/</guid><description>&lt;p>Before you read this post please run &lt;code>git --version&lt;/code> and if it’s not &lt;em>2.14.1&lt;/em> or greater then please go upgrade it.&lt;/p></description></item><item><title>Compromising Node.js apps using Machine-in-the-Middle</title><link>/blog/compromising-node-js-apps-using-machine-in-the-middle/</link><pubDate>Wed, 11 Jan 2017 16:31:08 -0800</pubDate><guid>/blog/compromising-node-js-apps-using-machine-in-the-middle/</guid><description>&lt;p>Just before the New Years I published 140+ advisories on Node.js modules. I’ve been researching ways to compromise developers &amp;amp; node.js applications without compromising the npm registry or their CDN.&lt;/p></description></item></channel></rss>