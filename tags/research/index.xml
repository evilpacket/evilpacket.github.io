<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Research on EvilPacket</title><link>/tags/research/</link><description>Recent content in Research on EvilPacket</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 09 Feb 2020 10:00:13 -0800</lastBuildDate><atom:link href="/tags/research/index.xml" rel="self" type="application/rss+xml"/><item><title>My Favorite Vulnerability: From ERROR to inter-protocol exploitation</title><link>/blog/my-favorite-vuln/</link><pubDate>Sun, 09 Feb 2020 10:00:13 -0800</pubDate><guid>/blog/my-favorite-vuln/</guid><description>&lt;p>I&amp;rsquo;m excited to finally write up and share my favorite vulnerability I&amp;rsquo;ve ever found. It&amp;rsquo;s a story where all the right pieces fell into place to make it exploitable. The names, ports, and other details have been changed to protect the vulnerable even though this took place probably 6 years ago and I believe the devices are now sunsetted.&lt;/p></description></item><item><title>Pillaging Distributed Version Control 5 Years Later</title><link>/blog/pillaging-distributed-version-control-5-years-later/</link><pubDate>Sun, 13 Nov 2016 10:38:59 -0700</pubDate><guid>/blog/pillaging-distributed-version-control-5-years-later/</guid><description>&lt;p>5 years ago at DEFCON 19 I gave a talked titled “Pillaging DVCS repos for fun and profit.” The technique &amp;amp; tool I outlined in that talk has been very fruitful through out the years and plenty of security consultants have told me that this had helped them have breakthroughs during penetration tests. If it’s useful to us it’s also useful to attackers.&lt;/p></description></item><item><title>What Are the Bots Up to on npm?</title><link>/blog/what-are-the-bots-up-to-on-npm/</link><pubDate>Tue, 08 Nov 2016 15:59:14 -0700</pubDate><guid>/blog/what-are-the-bots-up-to-on-npm/</guid><description>&lt;p>Last year (2015) I had a thought, “who else is downloading and running / testing random modules on npm.” Postulating that there might be bots, build systems or other researchers mass downloading and running modules from npm. I figured it might be an interesting vector to attack systems and gain a foothold for some org and I was curious to know what that traffic looked like.&lt;/p></description></item><item><title>Regular Expression Denial of Service Affecting Express.js</title><link>/blog/regular-expression-denial-of-service-affecting-express-js/</link><pubDate>Fri, 29 Apr 2016 15:59:41 -0700</pubDate><guid>/blog/regular-expression-denial-of-service-affecting-express-js/</guid><description>&lt;p>At the end of April I found a flaw in a module that Express and many other frameworks use. This flaw allows a remote attacker to block the event loop of a remote site causing a Denial of Service effectively blocking the site from being accessed. This type of attack is known as a Regular Expression Denial of Service attack and we’ve found it to be quite common in applications and modules we test.&lt;/p></description></item></channel></rss>